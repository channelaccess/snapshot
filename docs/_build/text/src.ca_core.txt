
src.ca_core package
*******************


Submodules
==========


src.ca_core.snapshot_ca module
==============================

class class src.ca_core.snapshot_ca.ActionStatus

   Bases: "enum.Enum"

   Returned by Snapshot methods to indicate their stressfulness.
   Possible states:
      busy: Returned by restore_pvs() if previous restore did not
      finished yet (non-blocking restore). ok: Action succeeded.
      no_data: Returned by restore_pvs() if no data was provided for
      restore. no_conn: Returned if one of the PVs is not connected
      and not in force mode. timeout: Returned by
      restore_pvs_blocking() when timeout occurs before all PVs are
      restored.

   busy = <ActionStatus.busy: 0>

   no_conn = <ActionStatus.no_conn: 3>

   no_data = <ActionStatus.no_data: 2>

   ok = <ActionStatus.ok: 1>

   timeout = <ActionStatus.timeout: 4>

exception exception src.ca_core.snapshot_ca.MacroError

   Bases: "src.ca_core.snapshot_ca.SnapshotError"

class class src.ca_core.snapshot_ca.PvStatus

   Bases: "enum.Enum"

   Returned by SnapshotPv on save_pv() and restore_pv() methods.
   Possible states:
      access_err: Not connected or not read/write permission at the
      time of action. ok: Action succeeded. no_value: Returned if
      value (save_pv) or desired value (restore_pv) for action is not
      defined. equal: Returned if restore value is equal to current PV
      value (no need to restore).

   access_err = <PvStatus.access_err: 0>

   equal = <PvStatus.equal: 3>

   no_value = <PvStatus.no_value: 2>

   ok = <PvStatus.ok: 1>

exception exception src.ca_core.snapshot_ca.ReqFileFormatError

   Bases: "src.ca_core.snapshot_ca.ReqParseError"

exception exception src.ca_core.snapshot_ca.ReqFileInfLoopError

   Bases: "src.ca_core.snapshot_ca.ReqParseError"

exception exception src.ca_core.snapshot_ca.ReqParseError

   Bases: "src.ca_core.snapshot_ca.SnapshotError"

class class src.ca_core.snapshot_ca.Snapshot(req_file_path, macros=None)

   Bases: "object"

   add_pvs(pv_list)

      Creates SnapshotPv objects for each PV in list. :param pv_list:
      List of PV names. :return:

   change_macros(macros=None)

      Check existing PVs if they have macros in their "raw name". If
      macros to be replaced remove existing PVs and create new PVs.
      :param macros: Dictionary of macros {'macro': 'value' } :return:

   clear_pvs()

   get_disconnected_pvs_names(selected=None)

      Get list off all currently disconnected PVs from all snapshot
      PVs (default) or from list of "selected" PVs. :param selected:
      List of PVs to check. :return: List of not connected PV names.

   get_pvs_names()

      Get list of SnapshotPvs :return: List of SnapshotPvs.

   static parse_from_save_file(save_file_path)

      Parses save file to dict {'pvname': {'data': {'value': <value>,
      'raw_name': <name_with_macros>}}} :param save_file_path: Path to
      save file. :return: (saved_pvs, meta_data, err)

         saved_pvs: in format {'pvname': {'data': {'value': <value>,
         'raw_name': <name_with_macros>}}} meta_data: as dictionary
         err: list of strings (each entry one error)

   parse_to_save_file(pvs, save_file_path, macros=None, symlink_path=None, **kw)

      This function is called at each save of PV values. This is a
      parser which generates save file from pvs. All parameters in
      >>**<<kw are packed as meta data :param pvs: :param
      save_file_path: :param symlink_path: :param kw: :return:

   remove_pvs(pv_list)

      Remove all SnapshotPv objects for PVs in list. :param pv_list:
      List of PV names. :return:

   replace_metadata(save_file_path, metadata)

      Reopen save data and replace meta data. :param save_file_path:
      Path to save file. :param metadata: Dict with new metadata.
      :return:

   restore_pvs(pvs_raw, force=False, callback=None, custom_macros=None)

      Restore PVs form snapshot file or dictionary. If restore is
      successfully started (ActionStatus.ok returned), then restore
      stressfulness will be returned in callback as: status={'pvname':
      PvStatus}, forced=was_restore? :param pvs_raw: Can be a dict of
      {'pvname': 'saved value'} or a path to a .snap file :param
      force: Force restore if not all needed PVs are connected? :param
      callback: Callback which will be called when all PVs are
      restored. :param custom_macros: This macros are used only if
      there is no self.macros and not a .snap file. :return:
      (action_status, pvs_status)

         * ActionStatus (ok: if restore was started, busy: previous
           not finished; no_data: nothing to restore; no_conn: some of
           PVs not connected)

         * pvs_status: Is dict of {'pvname': PvStatus}. Has
           meaningful content only in case of action_status ==
           ActionStatus.no_conn. In other cases, pvs_status is
           returned in callback.

   restore_pvs_blocking(pvs_raw=None, force=False, timeout=10, custom_macros=None)

      Similar as restore_pvs, but block until restore finished or
      timeout. :param pvs_raw: Can be a dict of {'pvname': 'saved
      value'} or a path to a .snap file :param force: Force restore if
      not all needed PVs are connected? :param callback: Callback
      which will be called when all PVs are restored. :param
      custom_macros: This macros are used only if there is no
      self.macros and not a .snap file. :param timeout: Timeout in
      seconds. :return: (action_status, pvs_status)

         * ActionStatus (ok: if restore was started, busy: previous
           not finished; no_data: nothing to restore; no_conn: some of
           PVs not connected)

         * pvs_status: Is dict of {'pvname': PvStatus}

   save_pvs(save_file_path, force=False, symlink_path=None, **kw)

      Get current PV values and save them in file. can also create
      symlink to the file. If additional metadata should be saved, it
      can be provided as keyword arguments. :param save_file_path:
      Path to save file. :param force: Save if not all PVs connected?
      Not connected PVs values will not be saved in such case. :param
      symlink_path: Path to symlink. If symlink exists it will be
      replaced. :param kw: Will be appended to metadata. :return:
      (action_status, dict_of_{'pvname': PvStatus})

exception exception src.ca_core.snapshot_ca.SnapshotError

   Bases: "Exception"

class class src.ca_core.snapshot_ca.SnapshotPv(pvname, macros=None, connection_callback=None, **kw)

   Bases: "epics.pv.PV"

   Extended PV class with non-blocking methods to save and restore
   pvs.

   add_conn_callback(callback)

      Set connection callback. :return: Connection callback index

   clear_callbacks()

      Removes all user callbacks and connection callbacks.

   static compare(value1, value2, is_array=False)

      Compare two values snapshot style (handling numpy arrays) for
      waveforms. :param value1: Value to be compared to value2. :param
      value2: Value to be compared to value1. :param is_array: Are
      values to be compared arrays? :return: Result of comparison.

   compare_to_curr(value)

      Compare value to current PV value. :param value: Value to be
      compared. :return: Result of comparison.

   static macros_substitution(txt: str, macros: dict)

      Returns string txt with substituted macros (defined as {macro:
      value}). :param txt: String with macros. :param macros:
      Dictionary with {macro: value} pairs. :return: txt with replaced
      macros.

   remove_conn_callback(idx)

      Remove connection callback. :return:

   restore_pv(value, callback=None)

      Executes asynchronous CA put if value is different to current PV
      value. Success status of this action is returned in callback.
      :param value: Value to be put to PV. :param callback: callback
      function in which success of restoring is monitored :return:

   save_pv()

      Non blocking CA get. Does not block if there is no connection or
      no read access. Returns latest value (monitored) or None if not
      able to get value. It also returns status of the action (see
      PvStatus) :return: (value, status)

   value_as_str()

   static value_to_str(value: str, is_array: bool)

class class src.ca_core.snapshot_ca.SnapshotReqFile(path: str, parent=None, macros: dict=None, changeable_macros: list=None)

   Bases: "object"

   read()

      Parse request file and return list of pv names where
      changeable_macros are not replaced. ("raw" pv names). In case of
      problems raises exceptions.

         ReqParseError
            ReqFileFormatError ReqFileInfLoopError

      Returns:
         List of PV names.

src.ca_core.snapshot_ca.parse_dict_macros_to_text(macros)

   Converting dict() separated macros string to comma separated.

   Parameters:
      **macros** -- dict of macros, substitutions

   Returns:
      macro string

src.ca_core.snapshot_ca.parse_macros(macros_str)

   Converting comma separated macros string to dictionary.

   Parameters:
      **macros_str** -- string of macros in style SYS=TST,D=A

   Returns:
      dict of macros


Module contents
===============
